#!/usr/bin/env python

"""
A python module for gene expression data generated by
Simon Melov, Ph.D.  This project uses the R-project for
statistical computing to analyze data and generate bar graphs
of gene expression as a function of C. elegans age (in days).

This module provides a function to find all the gene expression
plots available, returned as a dictionary of gene["oligo"] values
and a list of plotFiles.  The use is:
plotFiles, genes, oligos = getAllPlots()
"""

import sys
import os
import cPickle
import zipfile
import datetime

cwd = os.getcwd()

# Assume this script is run in a folder
# one level above the plots folder
# (check env for PATH_TRANSLATED)
plotPath = os.path.join(cwd,"plots")
plotPath = os.path.abspath(plotPath)
if not os.path.exists(plotPath):
    print "Content-Type: text/plain\n\n"
    print "Sorry, the ./plots path is not found!"
    print "Please advise the web admin of this error."
    sys.exit(1)

zipPath = os.path.join(cwd,"zipFiles")
zipPath = os.path.abspath(zipPath)
if not os.path.exists(zipPath):
    os.mkdir(zipPath)


def getAllPlotFiles():
    plotFiles = os.listdir(plotPath) 
    if not len(plotFiles):
        print "Content-Type: text/plain\n\n"
        print "Sorry, there are no plots available!"
        print "Please advise the web admin of this error."
        sys.exit(1)
    # Only work with .eps files
    for f in plotFiles:
        if not ".eps" in f:
            plotFiles.remove(f)
    # Check the timestamp on the pickled data.
    # If it is older than the timestamp on one
    # of the plot files, regenerate the pickle;
    # otherwise use it and skip parsing all the
    # plot file names.
    pickleFile = "plotData.obj"
    pickleFile = os.path.join(cwd, pickleFile)
    if os.path.exists(pickleFile):
        pickleTime = os.path.getmtime(pickleFile)
    else:
        pickleTime = None
    if pickleTime:
        plotFile = os.path.join(plotPath, plotFiles[0])
        plotTime = os.path.getmtime(plotFile)
        if pickleTime > plotTime:
            pickleIO = open(pickleFile, 'rb')
            pickle = cPickle.load(pickleIO)
            pickleIO.close()
            return pickle
    genes = {}
    oligos = []
    for f in plotFiles:
        sp = f.split('_')
        gene = sp[0]
        oligo = sp[1]
        oligo = oligo.replace(".eps",'')
        oligos.append(oligo)
        if gene in genes.keys():
            genes[gene].append(oligo)
        else:
            genes[gene] = [oligo]
    # Pickle the plot file data to make it available
    # for faster loading later.
    pickleIO = open(pickleFile, 'wb')
    cPickle.dump((plotFiles, genes, oligos), pickleIO, 1)
    pickleIO.close()
    return plotFiles, genes, oligos 


def zipCreateFile(oligoFiles):
    # Retrieve the .eps file(s) and archive them in a zip file.
    zipFileName = "tmp_%d.zip" % os.getpid()
    zipFileName = os.path.join(zipPath, zipFileName)
    zipFileData = zipfile.ZipFile(zipFileName, mode="w")
    for f in oligoFiles:
        oligoFile = os.path.join(plotPath, f)
        zipFileData.write(oligoFile, arcname=f)
    zipFileData.close()
    return zipFileName


def zipCleanupFiles():
    zipFiles = os.listdir(zipPath) 
    if not len(zipFiles):
        return
    # Check the timestamp on each .zip file.
    # If it is old, then remove it.
    dateTest = datetime.datetime.today() - datetime.timedelta(hours=6)
    for zip in zipFiles:
        zipFile = os.path.join(zipPath, zip)
        zipTime = os.path.getmtime(zipFile)
        zipTime = datetime.datetime.fromtimestamp(zipTime)
        if zipTime < dateTest:
            os.remove(zipFile)

if __name__ == "__main__":
    # Just test the function to get plot file names
    plotFiles, genes, oligos = getAllPlotFiles()
    print len(plotFiles), len(genes), len(oligos)

